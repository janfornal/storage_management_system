BEGIN;
DROP TABLE IF EXISTS INTERNET_SALE                              CASCADE;
DROP TABLE IF EXISTS COMPLAINT                                  CASCADE;
DROP TABLE IF EXISTS CLIENTS_RETURN                             CASCADE;
DROP TABLE IF EXISTS PRODUCTS_SOLD                              CASCADE;
DROP TABLE IF EXISTS PRODUCTS_PROBLEMS_SOLD                     CASCADE;
DROP TABLE IF EXISTS SALES                                      CASCADE;
DROP TABLE IF EXISTS PRODUCTS_PROBLEMS                          CASCADE;
DROP TABLE IF EXISTS VAT_HISTORY                                CASCADE;
DROP TABLE IF EXISTS CLIENTS                                    CASCADE;
DROP TABLE IF EXISTS ADDRESSES                                  CASCADE;
DROP TABLE IF EXISTS EMPLOYEES                                  CASCADE;
DROP TABLE IF EXISTS PRODUCTS_DELIVERIES                        CASCADE;
DROP TABLE IF EXISTS DELIVERIES                                 CASCADE;
DROP TABLE IF EXISTS STORE_STATUS                               CASCADE;
DROP TABLE IF EXISTS SUPPLIERS                                  CASCADE;
DROP TABLE IF EXISTS PRICE_HISTORY                              CASCADE;
DROP TABLE IF EXISTS PARAMETER_PRODUCTS                         CASCADE;
DROP TABLE IF EXISTS POSSIBLE_PARAMETERS                        CASCADE;
DROP TABLE IF EXISTS PRODUCTS                                   CASCADE;
DROP TABLE IF EXISTS PARAMETERS                                 CASCADE;
DROP TABLE IF EXISTS CATEGORIES                                 CASCADE;
DROP TABLE IF EXISTS BRAND                                      CASCADE;



DROP FUNCTION IF EXISTS check_insert_products_problems_sold     CASCADE;
DROP FUNCTION IF EXISTS check_delete_products_problems_sold     CASCADE;
DROP FUNCTION IF EXISTS returned_check                          CASCADE;
DROP FUNCTION IF EXISTS allowed_param_check                     CASCADE;
DROP FUNCTION IF EXISTS check_insert_products_sold              CASCADE;
DROP FUNCTION IF EXISTS check_delete_products_sold              CASCADE;
DROP FUNCTION IF EXISTS update_increase_store_status            CASCADE;
DROP FUNCTION IF EXISTS insert_id_products_to_store_status      CASCADE;
DROP FUNCTION IF EXISTS before_insert_on_clients_return         CASCADE;
DROP FUNCTION IF EXISTS before_update_or_insert_on_complaint    CASCADE;
DROP FUNCTION IF EXISTS hash_password                           CASCADE;


DROP FUNCTION IF EXISTS nice_repr_of_products                   CASCADE;
DROP FUNCTION IF EXISTS repr_of_products_problems               CASCADE;
DROP FUNCTION IF EXISTS get_gross_price                         CASCADE;
DROP FUNCTION IF EXISTS get_current_vat                         CASCADE;
DROP FUNCTION IF EXISTS get_current_price                       CASCADE;
DROP FUNCTION IF EXISTS get_price                               CASCADE;
DROP FUNCTION IF EXISTS get_price_problem                       CASCADE;
DROP FUNCTION IF EXISTS get_vat                                 CASCADE;
DROP FUNCTION IF EXISTS get_gross_price_time                    CASCADE;
DROP FUNCTION IF EXISTS get_gross_price_time_problem            CASCADE;
DROP FUNCTION IF EXISTS get_sale_price                          CASCADE;
DROP FUNCTION IF EXISTS get_gross_sale_price                    CASCADE;
DROP FUNCTION IF EXISTS sale_product_info                       CASCADE;
DROP FUNCTION IF EXISTS sale_full_product_info                  CASCADE;

COMMIT;
BEGIN;

CREATE TABLE BRAND (
    id_brand INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE CATEGORIES (
    id_category INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE PARAMETERS (
    id_parameter INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL UNIQUE,
    unit VARCHAR(100) -- unit can be NULL
);

CREATE TABLE PRODUCTS (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id_category INTEGER NOT NULL REFERENCES CATEGORIES(id_category),
    name VARCHAR(100) NOT NULL,
    id_brand INTEGER NOT NULL REFERENCES BRAND(id_brand) 
);

CREATE TABLE POSSIBLE_PARAMETERS (
    id_category INTEGER NOT NULL REFERENCES CATEGORIES(id_category),
    id_parameter INTEGER NOT NULL REFERENCES PARAMETERS(id_parameter),
    CONSTRAINT poss_param_key UNIQUE (id_category, id_parameter)
);

CREATE TABLE PARAMETER_PRODUCTS (
    id_parameter INTEGER NOT NULL REFERENCES PARAMETERS(id_parameter),
    id_product INTEGER NOT NULL REFERENCES PRODUCTS(id),
    quantity VARCHAR(100) NOT NULL, -- this should be VARCHAR ?
    CONSTRAINT param_pr_key UNIQUE (id_parameter, id_product) -- additional checks via trigger
);

CREATE TABLE PRICE_HISTORY (
    id_product INTEGER REFERENCES PRODUCTS(id),
    launch_date TIMESTAMP NOT NULL,
    CONSTRAINT ph_key UNIQUE (id_product, launch_date),
    net_price NUMERIC(8,2) NOT NULL 
);

CREATE TABLE SUPPLIERS (
    id_supplier INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE STORE_STATUS (
    id_product INTEGER NOT NULL REFERENCES PRODUCTS(id) UNIQUE,
    quantity NUMERIC(10) NOT NULL CHECK (quantity >= 0)
);

CREATE TABLE DELIVERIES (
    id_delivery INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id_supplier INTEGER NOT NULL REFERENCES SUPPLIERS(id_supplier),
    date_delivery TIMESTAMP NOT NULL
);

CREATE TABLE PRODUCTS_DELIVERIES (
    id_delivery INTEGER NOT NULL REFERENCES DELIVERIES(id_delivery),
    id_product INTEGER NOT NULL REFERENCES PRODUCTS(id),
    CONSTRAINT pd_key UNIQUE (id_delivery, id_product),
    quantity NUMERIC(10) NOT NULL CHECK (quantity > 0)
);

CREATE TABLE EMPLOYEES (
    id_employee INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "login" VARCHAR(16) NOT NULL UNIQUE,
    "password" VARCHAR(100) NOT NULL,
    first_name VARCHAR(16) NOT NULL,
    last_name VARCHAR(16) NOT NULL

);

CREATE TABLE ADDRESSES (
    id_address INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    postal_code VARCHAR(8) NOT NULL,
    city VARCHAR(50) NOT NULL,
    street VARCHAR(50),
    building_number INTEGER NOT NULL,
    flat_number INTEGER

);

CREATE TABLE CLIENTS (
    id_client INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "login" VARCHAR(16) NOT NULL,
    "password" VARCHAR(100) NOT NULL,
    first_name VARCHAR(16) NOT NULL,
    last_name VARCHAR(16) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(12),
    id_address INTEGER REFERENCES ADDRESSES(id_address)
);

CREATE TABLE VAT_HISTORY (
    id_category INTEGER NOT NULL REFERENCES CATEGORIES(id_category),
    launch_date TIMESTAMP NOT NULL,
    vat SMALLINT NOT NULL    
);

CREATE TABLE PRODUCTS_PROBLEMS (
    id_product_with_problem INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id_product INTEGER NOT NULL REFERENCES PRODUCTS(id),
    quantity NUMERIC(10) NOT NULL CHECK (quantity >= 0),
    exhibition BOOLEAN NOT NULL,
    returned BOOLEAN NOT NULL,
    problem_description VARCHAR(100),
    discount SMALLINT NOT NULL CHECK (discount >= 0)
);

CREATE TABLE SALES (
    id_sale INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sales_date TIMESTAMP NOT NULL
);

CREATE TABLE PRODUCTS_SOLD (
    id_sale INTEGER NOT NULL REFERENCES SALES(id_sale),
    id_product INTEGER NOT NULL REFERENCES PRODUCTS(id),
    UNIQUE (id_sale, id_product),
    quantity NUMERIC(10) NOT NULL CHECK (quantity > 0)
);

CREATE TABLE PRODUCTS_PROBLEMS_SOLD (
    id_sale INTEGER NOT NULL REFERENCES SALES(id_sale),
    id_product_with_problem INTEGER NOT NULL REFERENCES PRODUCTS_PROBLEMS(id_product_with_problem),
    UNIQUE (id_sale, id_product_with_problem),
    quantity NUMERIC(10) NOT NULL CHECK (quantity > 0)
);

CREATE TABLE CLIENTS_RETURN (
    id_return INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id_sale INTEGER NOT NULL REFERENCES SALES(id_sale),
    id_product INTEGER NOT NULL REFERENCES PRODUCTS(id),
    quantity NUMERIC(10) NOT NULL CHECK (quantity > 0),
    return_date TIMESTAMP NOT NULL -- additional checks via trigger
);

CREATE TABLE COMPLAINT (
    id_complaint INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id_product INTEGER NOT NULL REFERENCES PRODUCTS(id),
    id_sale INTEGER NOT NULL REFERENCES SALES(id_sale),
    quantity NUMERIC(10) NOT NULL CHECK (quantity > 0),
    complaint_date TIMESTAMP NOT NULL,
    complaint_description VARCHAR(100),
    result_date TIMESTAMP,
    complaint_accepted BOOLEAN,
    id_employee INTEGER REFERENCES EMPLOYEES(id_employee)
    --data odbioru?
);

CREATE TABLE INTERNET_SALE(
    id_sale INTEGER NOT NULL REFERENCES SALES(id_sale),
    date_delivery TIMESTAMP NOT NULL,
    method_delivery VARCHAR(10),
    id_address INTEGER REFERENCES ADDRESSES(id_address)
);

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO storagemanagementsystem;

COMMIT;
BEGIN;

CREATE FUNCTION returned_check()
    RETURNS trigger AS
$$
BEGIN
    IF (
        SELECT SUM(quantity)
        FROM PRODUCTS_SOLD
        WHERE id_sale = NEW.id_sale AND id_product = NEW.id_product
    )-(
        SELECT SUM(quantity)
        FROM CLIENTS_RETURN
        WHERE id_sale = NEW.id_sale AND id_product = NEW.id_product
    ) < 0 THEN
        RAISE EXCEPTION 'returned too many products';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER trigger_returned_check
AFTER INSERT
ON CLIENTS_RETURN
FOR EACH ROW
EXECUTE PROCEDURE returned_check();

CREATE TRIGGER trigger_complaints_check
AFTER INSERT
ON COMPLAINT
FOR EACH ROW
EXECUTE PROCEDURE returned_check();

---------------------------------------------------------------

CREATE FUNCTION allowed_param_check()
    RETURNS trigger AS
$$
BEGIN
    IF (
        SELECT COUNT(*)
        FROM POSSIBLE_PARAMETERS
        JOIN PRODUCTS 
        ON PRODUCTS.id = NEW.id_product AND POSSIBLE_PARAMETERS.id_category = PRODUCTS.id_category
    ) = 0 THEN
        RAISE EXCEPTION 'this parameter is not allowed';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER trigger_returned_check
AFTER INSERT
ON PARAMETER_PRODUCTS
FOR EACH ROW
EXECUTE PROCEDURE allowed_param_check();

---------------------------------------------------------------

CREATE FUNCTION check_insert_products_sold()
    RETURNS trigger AS
$$
DECLARE
    val NUMERIC;
BEGIN
    SELECT quantity FROM store_status WHERE id_product = NEW.id_product INTO val;

    IF val < NEW.quantity THEN
        RETURN NULL;
    END IF;

    UPDATE STORE_STATUS
    SET quantity = quantity - NEW.quantity
    WHERE id_product = NEW.id_product;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

--trigger below disables putting new record in PRODUKTY_SPRZEDAZ where ilosc > ilosc in
--respective record in stan_magazynu, also changes respective ilosc value
CREATE TRIGGER trigger_check_insert_products_sold
    BEFORE INSERT
    ON PRODUCTS_SOLD
    FOR EACH ROW
EXECUTE PROCEDURE check_insert_products_sold();

---------------------------------------------------------------

CREATE RULE check_mod_products_sold AS ON UPDATE TO PRODUCTS_SOLD DO INSTEAD NOTHING;

CREATE FUNCTION check_delete_products_sold()
    RETURNS trigger AS
$$
BEGIN
    UPDATE STORE_STATUS
    SET quantity = quantity + OLD.quantity
    WHERE id_product = OLD.id_product;
    RETURN OLD;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER check_delete_products_sold
    BEFORE DELETE
    ON PRODUCTS_SOLD
    FOR EACH ROW
EXECUTE PROCEDURE check_delete_products_sold();

---------------------------------------------------------------

--updates record in STORE_STATUS, after inserting into PRODUCTS_DELIVERIES
CREATE FUNCTION update_increase_store_status()
    RETURNS trigger AS
$$
BEGIN
    UPDATE STORE_STATUS
    SET quantity = quantity + NEW.quantity
    WHERE id_product = NEW.id_product;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER trigger_ilosc_pd
AFTER INSERT
ON PRODUCTS_DELIVERIES
FOR EACH ROW
EXECUTE PROCEDURE update_increase_store_status();

---------------------------------------------------------------

CREATE FUNCTION insert_id_products_to_store_status()
    RETURNS trigger AS
$$
BEGIN
    INSERT INTO STORE_STATUS (id_product, quantity) VALUES (NEW.id, 0);
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

--name of trigger is long, but self-explanatory
CREATE TRIGGER trigger_add_id_to_store_status  
AFTER INSERT
ON PRODUCTS
FOR EACH ROW
EXECUTE PROCEDURE insert_id_products_to_store_status();

---------------------------------------------

CREATE FUNCTION check_insert_products_problems_sold()
    RETURNS trigger AS
$$
DECLARE
    val NUMERIC;
BEGIN
    SELECT quantity FROM products_problems WHERE id_product_with_problem = NEW.id_product_with_problem INTO val;

    IF val < NEW.quantity THEN
        RETURN NULL;
    END IF;

    UPDATE products_problems
    SET quantity = quantity - NEW.quantity
    WHERE id_product_with_problem = NEW.id_product_with_problem;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

--trigger below disables putting new record in PRODUKTY_SPRZEDAZ where ilosc > ilosc in
--respective record in stan_magazynu, also changes respective ilosc value
CREATE TRIGGER trigger_check_insert_products_problems_sold
    BEFORE INSERT
    ON PRODUCTS_PROBLEMS_SOLD
    FOR EACH ROW
EXECUTE PROCEDURE check_insert_products_problems_sold();

---------------------------------------------------------------

CREATE FUNCTION check_delete_products_problems_sold()
    RETURNS trigger AS
$$
BEGIN
    UPDATE products_problems
    SET quantity = quantity + OLD.quantity
    WHERE id_product_with_problem = OLD.id_product_with_problem;
    RETURN OLD;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER check_delete_products_problems_sold
    BEFORE DELETE
    ON PRODUCTS_PROBLEMS_SOLD
    FOR EACH ROW
EXECUTE PROCEDURE check_delete_products_problems_sold();

---------------------------------------------------------------

CREATE FUNCTION before_insert_on_clients_return()
    RETURNS trigger AS
$$
BEGIN
    IF NEW.return_date < (SELECT sales_date FROM SALES WHERE id_sale = NEW.id_sale) THEN
        RETURN NULL;
    END IF;

    INSERT INTO
    PRODUCTS_PROBLEMS (id_product, quantity, exhibition, returned, problem_description, discount)
    VALUES (NEW.id_product, NEW.quantity, FALSE, TRUE, 'produkt zwrócony po zakupie', 10);

    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER before_insert_on_clients_return
BEFORE INSERT
ON CLIENTS_RETURN
FOR EACH ROW
EXECUTE PROCEDURE before_insert_on_clients_return();

---------------------------------------------------------------

CREATE FUNCTION before_update_or_insert_on_complaint()
    RETURNS trigger AS
$$
BEGIN
    IF NEW.complaint_date < (SELECT sales_date FROM SALES WHERE id_sale = NEW.id_sale) THEN
        RETURN OLD;
    END IF;

    IF OLD IS NOT NULL AND OLD.result_date IS NOT NULL THEN
        RETURN OLD;
    END IF;

    IF NEW.result_date IS NULL AND
       NEW.complaint_accepted IS NULL AND
       NEW.id_employee IS NULL THEN
        RETURN NEW;
    END IF;

    IF NEW.complaint_description IS NOT NULL AND
       NEW.result_date IS NOT NULL AND
       NEW.complaint_accepted IS NOT NULL AND
       NEW.id_employee IS NOT NULL THEN
        IF NEW.result_date < NEW.complaint_date THEN
            RETURN OLD;
        END IF;

        IF NEW.complaint_accepted THEN
            INSERT INTO
            PRODUCTS_PROBLEMS (id_product, quantity, exhibition, returned, problem_description, discount)
            VALUES (NEW.id_product, NEW.quantity, FALSE, FALSE, NEW.complaint_description, 10);
        END IF;

        RETURN NEW;
    END IF;

    RETURN OLD;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER before_update_or_insert_on_complaint
BEFORE INSERT OR UPDATE
ON COMPLAINT
FOR EACH ROW
EXECUTE PROCEDURE before_update_or_insert_on_complaint();

---------------------------------------------------------------

CREATE FUNCTION hash_password()
    RETURNS TRIGGER AS
$$
BEGIN
    NEW.password := encode(sha512(NEW.password::BYTEA), 'base64');
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER hash_password1
    BEFORE INSERT OR UPDATE
    ON EMPLOYEES
    FOR EACH ROW
EXECUTE PROCEDURE hash_password();

CREATE TRIGGER hash_password2
    BEFORE INSERT OR UPDATE
    ON CLIENTS
    FOR EACH ROW
EXECUTE PROCEDURE hash_password();

---------------------------------------------------------------

COMMIT;
CREATE OR REPLACE FUNCTION get_current_price(id INTEGER)   -- pierwszych 3 funkcji nie powinno być, jak bedzie czas to refactor
RETURNS numeric(8, 2) AS 
$$
BEGIN
    RETURN (SELECT net_price
    FROM PRICE_HISTORY
    WHERE id_product = id
    ORDER BY launch_date DESC
    LIMIT 1);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_current_vat(id_arg INTEGER)
    RETURNS integer AS
$$
BEGIN
    RETURN (SELECT vat
    FROM VAT_HISTORY
    WHERE id_category = (SELECT id_category FROM products WHERE id = id_arg)
    ORDER BY launch_date DESC
    LIMIT 1);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_gross_price(id INTEGER)
    RETURNS numeric(8, 2) AS
$$
BEGIN
    RETURN ROUND(get_current_price(id)*(1 + (get_current_vat(id))/100.0), 2);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION nice_repr_of_products()  -- dodaj timestamp (celowo to nie jest view)
    RETURNS table(id int, 
    brand varchar(100), 
    name varchar(100), 
    category varchar(100), 
    amount numeric(10), 
    net_price numeric(8, 2)) AS
$$
BEGIN
    RETURN query
    SELECT products.id,
    (SELECT brand.name FROM brand WHERE id_brand = products.id_brand),
    products.name,
    (SELECT categories.name FROM CATEGORIES WHERE id_category = products.id_category),
    (SELECT store_status.quantity FROM STORE_STATUS WHERE store_status.id_product = products.id),
    get_current_price(products.id)
    FROM products;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_price(id INTEGER, t TIMESTAMP)
    RETURNS numeric(8, 2) AS
$$
BEGIN
    RETURN (SELECT net_price
            FROM PRICE_HISTORY
            WHERE id_product = id AND launch_date <= t
            ORDER BY launch_date DESC
            LIMIT 1);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_price_problem(id_problem INTEGER, t TIMESTAMP)
    RETURNS numeric(8, 2) AS
$$
BEGIN
    RETURN (SELECT ROUND(get_price(id_product, t)*(100 - discount)/100.0, 2)
            FROM products_problems WHERE id_product_with_problem = id_problem);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_vat(id_arg INTEGER, t TIMESTAMP)
    RETURNS integer AS
$$
BEGIN
    RETURN (SELECT vat
            FROM VAT_HISTORY
            WHERE id_category = (SELECT id_category FROM products WHERE id = id_arg) AND launch_date <= t
            ORDER BY launch_date DESC
            LIMIT 1);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_gross_price_time(id INTEGER, t TIMESTAMP)
    RETURNS numeric(8, 2) AS
$$
BEGIN
    RETURN ROUND(get_price(id, t)*(1 + (get_vat(id, t))/100.0), 2);
END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION get_gross_price_time_problem(id_problem INTEGER, t TIMESTAMP)
    RETURNS numeric(8, 2) AS
$$
BEGIN
    RETURN (SELECT ROUND(get_price(id_product, t)*(1 + (get_vat(id_product, t))/100.0)*((100 - discount)/100.0), 2)
            FROM products_problems WHERE id_product_with_problem = id_problem);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_sale_price(id INTEGER)
    RETURNS numeric(8, 2) AS
$$
BEGIN
    RETURN COALESCE((SELECT SUM(get_price(id_product, (SELECT sales_date FROM sales WHERE id_sale = id))*quantity)
            FROM products_sold
            WHERE id_sale = id), 0.0) +
           COALESCE((SELECT SUM(get_price_problem(id_product_with_problem, (SELECT sales_date FROM sales WHERE id_sale = id))*quantity)
            FROM products_problems_sold
            WHERE id_sale = id), 0.0);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION get_gross_sale_price(id INTEGER)
    RETURNS numeric(8, 2) AS
$$
BEGIN
    RETURN COALESCE((SELECT SUM(get_gross_price_time(id_product, (SELECT sales_date FROM sales WHERE id_sale = id))*quantity)
            FROM products_sold
            WHERE id_sale = id), 0.0) +
           COALESCE((SELECT SUM(get_gross_price_time_problem(id_product_with_problem, (SELECT sales_date FROM sales WHERE id_sale = id))*quantity)
            FROM products_problems_sold
            WHERE id_sale = id), 0.0);
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION sale_product_info(id INTEGER)
    RETURNS TABLE(
        id_product INTEGER,
        product_name VARCHAR(100),
        quantity NUMERIC(10),
        net_price NUMERIC(8, 2),
        gross_price NUMERIC(8, 2)
    ) AS
$$
DECLARE
    id_s INTEGER := id;
    time TIMESTAMP := (SELECT sales_date FROM SALES s WHERE s.id_sale = id_s);
BEGIN
    RETURN QUERY SELECT
    p.id, p.name, ps.quantity - (
        SELECT COALESCE(SUM(cr.quantity), 0)
        FROM CLIENTS_RETURN cr
        WHERE cr.id_sale = id_s
        AND cr.id_product = p.id
    ) - (
        SELECT COALESCE(SUM(co.quantity), 0)
        FROM complaint co
        WHERE co.id_sale = id_s
        AND co.id_product = p.id
    ), get_price(p.id, time), get_gross_price_time(p.id, time)
    FROM products_sold ps JOIN products p
    ON p.id = ps.id_product WHERE ps.id_sale = id_s;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION sale_full_product_info(id INTEGER)
    RETURNS TABLE(
        id_product INTEGER,
        product_name VARCHAR(100),
        quantity NUMERIC(10),
        net_price NUMERIC(8, 2),
        gross_price NUMERIC(8, 2),
        new BOOLEAN
    ) AS
$$
DECLARE
    id_s INTEGER := id;
    time TIMESTAMP := (SELECT sales_date FROM SALES s WHERE s.id_sale = id_s);
BEGIN
    RETURN QUERY SELECT *, TRUE FROM sale_product_info(id_s) UNION SELECT
    p.id, p.name, ps.quantity,
    get_price(p.id, time) * (100 - pp.discount) / 100.0,
    get_gross_price_time(p.id, time) * (100 - pp.discount) / 100.0, FALSE
    FROM PRODUCTS_PROBLEMS_SOLD ps JOIN PRODUCTS_PROBLEMS pp USING (id_product_with_problem)
    JOIN products p ON p.id = pp.id_product
    WHERE ps.id_sale = id_s;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION repr_of_products_problems(id INTEGER)
    RETURNS TABLE(
         id_return INTEGER,
         description VARCHAR(100),
         quant NUMERIC(10),
         price NUMERIC(8, 2)
     ) AS
$$
BEGIN
    RETURN QUERY
    SELECT id_product_with_problem, problem_description, quantity, get_price_problem(id_product_with_problem, now()::timestamp)
    FROM PRODUCTS_PROBLEMS
    WHERE id_product = id AND quantity > 0;
END;
$$ LANGUAGE 'plpgsql';
\copy categories FROM './data/categories.csv' with delimiter ',' csv header;
\copy brand FROM './data/brand.csv' with delimiter ',' csv header;
\copy products FROM './data/products.csv' with delimiter ',' csv header;
\copy vat_history FROM './data/vat_history.csv' with delimiter ',' csv header;
\copy price_history FROM './data/price_history.csv' with delimiter ',' csv header;
\copy parameters FROM './data/parameters.csv' with delimiter ',' csv header;
\copy possible_parameters FROM './data/possible_parameters.csv' with delimiter ',' csv header;
\copy parameter_products FROM './data/parameter_products.csv' with delimiter ',' csv header;BEGIN;
COPY SUPPLIERS (name) FROM stdin; 
SAGE GLOBAL
BELDRAY EUROPE
BLUEAIR
PHILIPS
SHARK GLOBAL
RUSSELL EUROPE
HOMEDICS GLOBAL
DYSON
LEITZ GLOBAL
LOGIK GLOBAL
BELKIN EUROPE
ONE EUROPE
GOJI EUROPE
SANDSTROM
SANUS
TENBA GLOBAL
SONY
HAMA EUROPE
MANFROTTO
CASE EUROPE
LOWEPRO GLOBAL
WAHL EUROPE
SALTER
XAVAX
SWAN EUROPE
SOLIS
MEATER GLOBAL
CANON EUROPE
TRANSCEND
GOXTREME EUROPE
2-POWER GLOBAL
DURACELL GLOBAL
SBOX EUROPE
VIVANCO GLOBAL
STARTECH GLOBAL
LABGEAR
VALIANT GLOBAL
GEORGE
WARMLITE GLOBAL
TOWER
KENKO GLOBAL
CLCKR GLOBAL
GEAR4
XQISIT EUROPE
POPSOCKETS GLOBAL
OTTERBOX
UAG GLOBAL
WILMA
DYNAMODE GLOBAL
ASUS EUROPE
AUSTERE
ALLSOP GLOBAL
KRUPS GLOBAL
DELONGHI GLOBAL
MELITTA GLOBAL
NESCAFE
STARBUCKS GLOBAL
EMBER EUROPE
TASSIMO GLOBAL
NESPRESSO
BREVILLE GLOBAL
HYPERX EUROPE
PNY
CORSAIR GLOBAL
MICROSOFT GLOBAL
NVIDIA EUROPE
NINTENDO GLOBAL
FLAVEL GLOBAL
BEKO EUROPE
ESSENTIALS GLOBAL
KENWOOD
GOTHAM GLOBAL
SABICHI GLOBAL
COREL EUROPE
NERO EUROPE
ADOBE
CYBERLINK EUROPE
MEACO
ZANUSSI EUROPE
DAEWOO GLOBAL
BLACK
DUUX GLOBAL
RUSSELLHOB
OLYMPUS EUROPE
BOSCH GLOBAL
SHARP
SAMSUNG
INDESIT
KNOWHOW GLOBAL
DREAMLAND GLOBAL
BEURER EUROPE
STATUS
ORAL
WATERPIK EUROPE
OVERADE EUROPE
AIRWALK EUROPE
CRAZY EUROPE
WELDTITE EUROPE
MOPHIE GLOBAL
ENERGIZER
SEGWAY EUROPE
LIVALL EUROPE
DECENT EUROPE
TOSHIBA EUROPE
WD GLOBAL
SEAGATE GLOBAL
SANDISK
HUAWEI GLOBAL
FITBIT GLOBAL
SODASTREAM
FOODSAVER
KITCHENAID EUROPE
MAGIMIX GLOBAL
NINJA GLOBAL
LG
HP GLOBAL
LENOVO
ACER
PCSPECIALIST EUROPE
ADX GLOBAL
AROZZI GLOBAL
BRAZEN EUROPE
RAZER EUROPE
NOBLECHAIRS EUROPE
X
NEXT
PLAYSEAT
FLYMO EUROPE
EINHELL GLOBAL
MSI EUROPE
POWERCOLOR
GIGABYTE
PALIT
WACOM
NICKY EUROPE
CARMEN EUROPE
GLAMORISER GLOBAL
GRUNDIG GLOBAL
PAUL
PANASONIC GLOBAL
REMINGTON EUROPE
BABYLISS
JLAB
BOSE
JBL
BEATS
PROSOUND GLOBAL
BLUE EUROPE
ADVENT
POLY EUROPE
CREATIVE
LOGITECH GLOBAL
ASTRO EUROPE
STEELSERIES
TURTLE GLOBAL
POWER GLOBAL
TEFAL EUROPE
HIVE GLOBAL
EVE EUROPE
TADO GLOBAL
GOOGLE
TCP GLOBAL
NETATMO EUROPE
ENERGENIE EUROPE
NEFF GLOBAL
AEG
SLX GLOBAL
AVF
JVC
SONOS EUROPE
LEISURE GLOBAL
CANDY
NORD GLOBAL
NORTON
MCAFEE
MORPHY
BRAUN GLOBAL
BLENDJET GLOBAL
NUTRIBULLET GLOBAL
KENSINGTON
APPLE EUROPE
ROCCAT EUROPE
BROTHER
CONNECTED EUROPE
FELLOWES EUROPE
REXEL EUROPE
GBC EUROPE
FUJIFILM
NIKON EUROPE
GROOV-E
DEVICE GLOBAL
LUCECO EUROPE
LEDVANCE EUROPE
INFAPOWER
TWINKLY GLOBAL
LLOYTRON GLOBAL
NEXUS
PUREMEDIA EUROPE
INTEGRAL EUROPE
WHITE EUROPE
RAPOO GLOBAL
MARTIN EUROPE
AXUS EUROPE
ROCKJAM
YAMAHA
ROCKET EUROPE
CAD GLOBAL
3RD GLOBAL
PERRIS GLOBAL
ALESIS GLOBAL
TP-LINK EUROPE
DRAYTEK EUROPE
NETGEAR EUROPE
PARALLELS GLOBAL
PRAKTICA GLOBAL
CELESTRON GLOBAL
NAT.
HOOVER EUROPE
HOTPOINT
POLAROID
EPSON
KODAK
CRYORIG
THERMAL GLOBAL
BE
IFIXIT EUROPE
NZXT
STEAM EUROPE
XBOX
LAPLINK EUROPE
MAJORITY EUROPE
AKAI GLOBAL
OAKCASTLE
ZAGG EUROPE
SEASONIC GLOBAL
KOLINK GLOBAL
MAKITA
DREMEL EUROPE
GARDENA GLOBAL
DEVOLO GLOBAL
BT GLOBAL
ROCKETBOOK
INTEL
AMD
NOBLE EUROPE
SKY GLOBAL
GARMIN GLOBAL
TOMTOM
ROAD EUROPE
EASYPIX EUROPE
VEHO EUROPE
SWANN EUROPE
YALE GLOBAL
ARLO EUROPE
RING
AMAZON EUROPE
EUFY GLOBAL
SINGER
THOR
LAUT
HYPERICE
HIDRATE EUROPE
NOERDEN GLOBAL
WITHINGS
BELLABEAT EUROPE
SLENDERTONE GLOBAL
RYZE EUROPE
DJI GLOBAL
SCIENCE GLOBAL
SUMUP GLOBAL
GREEN EUROPE
LOGIBLOCS
YOTO EUROPE
ULTIMATE
KARCHER GLOBAL
ELGATO GLOBAL
BISSELL
VAX EUROPE
CLEARWATER EUROPE
LAY-Z-SPA EUROPE
SMEG EUROPE
LIAN-LI EUROPE
PHANTEKS GLOBAL
BITFENIX EUROPE
FRACTAL EUROPE
WENGER EUROPE
VELD GLOBAL
MASTERPLUG EUROPE
VAGO
NUMATIC EUROPE
MIELE GLOBAL
META
HTC EUROPE
OCULUS GLOBAL
ANKER
CANYON GLOBAL
OMRON
THERABODY GLOBAL
LINKSYS GLOBAL
TENDA
\.

COPY EMPLOYEES (login, password, first_name, last_name) FROM stdin; 
ward884	767323306	Brandi	Ward
stout890	367777185	Joshua	Stout
pace329	76378783	Cameron	Pace
lopez502	288301305	Billy	Lopez
barber823	674634508	Curtis	Barber
berry63	962179181	Nathan	Berry
brown309	493268384	Madison	Brown
ramirez228	158559017	John	Ramirez
patrick273	668252928	Kevin	Patrick
parrish467	752583989	Rodney	Parrish
nelson674	125158426	Jeffery	Nelson
holmes585	449649650	Shelly	Holmes
blackburn440	353336715	Shawn	Blackburn
shelton263	83052934	Matthew	Shelton
rivera496	630107547	Carly	Rivera
\.

COPY DELIVERIES (id_supplier, date_delivery) FROM stdin; 
87	2019-10-01 00:41:19
241	2019-10-26 02:33:05
\.

COPY PRODUCTS_DELIVERIES (id_delivery, id_product, quantity) FROM stdin; 
1	78	14
1	917	68
1	1784	10
1	615	23
1	552	33
1	501	55
1	1812	54
1	271	76
1	1951	52
1	931	82
1	1418	28
1	1730	35
1	1861	27
1	634	78
1	649	19
1	948	85
1	798	61
1	468	26
1	921	85
1	761	26
1	2028	24
1	1477	76
1	187	77
1	1862	99
1	671	14
1	1246	68
1	131	73
1	2020	76
1	430	74
1	1422	33
1	2056	24
1	692	47
1	2069	94
1	1425	21
1	1255	34
1	918	38
1	1655	13
1	23	95
1	2064	99
1	244	28
1	1729	43
1	1872	16
1	855	18
1	1798	34
1	1831	72
1	585	38
1	483	93
1	1629	63
1	119	81
1	679	72
1	299	12
1	326	24
1	440	90
1	1278	73
1	480	70
1	332	84
1	51	65
1	688	75
1	457	88
1	1593	32
1	1320	71
1	1305	73
1	215	71
1	1788	97
1	954	60
1	124	72
1	522	72
1	910	21
1	1332	29
1	322	25
1	847	73
1	1725	93
1	125	70
1	832	55
1	1727	38
1	1259	98
1	3	19
1	627	67
1	147	18
1	465	48
1	1494	55
1	834	18
1	283	30
1	1501	17
1	1044	76
1	294	61
1	2026	70
1	1533	33
1	92	35
1	1111	80
1	1329	47
1	1846	27
1	256	32
1	1344	40
1	1352	34
2	1950	72
2	1643	63
2	2060	15
2	669	91
2	1629	14
2	748	74
2	1731	12
2	2020	65
2	1850	89
2	759	92
2	1562	47
2	467	20
2	972	74
2	1334	17
2	1243	84
2	1071	26
2	1130	62
2	1348	33
2	898	28
2	151	80
2	604	87
2	823	98
2	775	42
2	1564	49
2	1504	84
2	596	18
2	531	77
2	1947	62
2	119	73
2	485	60
2	331	17
2	1036	48
2	1008	29
2	1019	31
2	935	15
2	502	71
2	305	63
2	657	99
2	1535	76
2	1963	32
2	1814	36
2	486	77
2	1598	34
2	1492	25
2	1119	22
2	277	86
2	723	97
2	1062	18
2	641	50
2	246	76
2	1802	41
2	1370	84
2	1663	24
2	1911	67
2	1003	21
2	31	53
2	1915	35
2	1905	20
2	1636	82
2	75	27
2	1475	51
2	793	57
2	802	26
2	865	33
\.

COPY ADDRESSES (postal_code, city, street, building_number, flat_number) FROM stdin; 
41299	East Matthewchester	Tonya Neck	63032	8
82699	Kellybury	Smith Cliff	09954	7
20098	North Danielchester	Suzanne Vista	71635	15
41462	Stevensfurt	Smith Plain	84263	15
85895	Stevensborough	Robert Roads	760	15
22393	Limouth	Stacy Hill	97292	5
34781	Jenniferchester	Kane Plaza	635	5
70031	Port Patriciafort	Gabriel Trace	7888	13
98766	North Joseph	Marissa Views	0833	17
75790	Nguyenville	Steven Harbor	819	7
71274	New Garymouth	David Isle	62410	19
93340	Jenkinsshire	Murray Parks	72787	6
42566	Kaylaside	Villarreal Neck	4124	20
20784	Port Calebport	Duran Freeway	1754	20
53163	Alyssaport	Schneider Islands	9435	18
03734	New Nichole	Nathan Plains	30266	13
43813	Christopherville	Randy Road	28847	3
38724	East Elizabethmouth	Ortiz Turnpike	0177	16
03682	Thomasburgh	Matthew Spur	6972	11
51789	South Paula	Clarke Terrace	249	18
37495	Brettstad	Camacho Ports	6455	5
64619	Brianside	Little Bypass	449	12
64785	North Marcia	Ali Burg	058	5
76312	North Scott	Tiffany Hill	085	7
19399	Murphyberg	Velez Flats	1883	7
24874	East Alexandrastad	Jerry Trail	9799	20
51133	Lake Sherri	Scott Square	780	1
79284	Lisamouth	Christopher Port	956	17
39645	East Williamfort	Torres Square	46514	1
89051	East Steven	Karen Road	02286	11
41551	Lake Cameron	Estes Haven	347	11
01290	East Regina	David Pike	0678	10
64781	Amandamouth	Maldonado Greens	008	18
45401	Port Robert	Steven Squares	3371	9
23246	Kristenton	Small Stream	387	13
\.

COPY CLIENTS (login, password, first_name, last_name, email, phone, id_address) FROM stdin; 
garcia538	967035905	Melanie	Garcia	Garcia_Melanie4690@miller-hurley.info	\N	9
holder701	13627505	Albert	Holder	Holder.Albert7350@hines-williams.com	\N	17
beasley193	964008560	Kelly	Beasley	BeasleyKelly4998@thomas.biz	+48517303729	25
smith321	280337938	Joseph	Smith	Smith.8154@lynch.com	+48280940905	9
terry645	487153777	Tracy	Terry	Terry3910@anderson.biz	\N	34
hall508	332299085	Jerry	Hall	HallJerry5758@lyons-martin.info	+48719912200	24
serrano800	320505431	Jennifer	Serrano	Serrano.Jennifer1990@williams.com	+48982928170	26
green562	192392515	Jennifer	Green	GreenJennifer8212@davis.com	+48322825102	3
singleton667	688118231	Cory	Singleton	Singleton_Cory5334@park.com	\N	11
black451	258898443	Jamie	Black	Black_Jamie7419@james-rodriguez.org	+48527927164	31
middleton476	1007072937	John	Middleton	Middleton1128@smith-shaffer.com	+48849011942	28
owens550	607181054	Brandi	Owens	Owens_Brandi2519@carney-clark.net	+48339816576	29
haney674	631264345	Susan	Haney	Haney.6856@lewis.com	\N	7
parker308	619184173	Jamie	Parker	Parker.2675@harris.com	\N	30
harding234	750278836	Casey	Harding	Harding_1405@clark-johnson.net	\N	31
patrick966	680731097	Janet	Patrick	Patrick7673@merritt.com	+48856481131	8
gilbert104	374470790	Robin	Gilbert	Gilbert.Robin5266@nguyen-black.net	+48650445254	21
cox322	604403722	Tyler	Cox	CoxTyler6639@moore.com	+48446893828	24
austin814	236573676	Brenda	Austin	Austin_611@miller-lawrence.com	+48734479071	31
moore421	71290728	Dominique	Moore	Moore_Dominique510@scott.com	+48701412155	3
lee802	1038907348	Melissa	Lee	Lee3712@lozano-rivera.net	+48674122497	26
curry430	682859479	Brian	Curry	Curry_5753@lopez.com	+48249299876	4
rice1	356208245	Jennifer	Rice	Rice_Jennifer6575@watts-jones.com	\N	26
hernandez328	288625064	Thomas	Hernandez	Hernandez_Thomas709@ortega-reid.com	+48383692060	29
heath216	454992592	Pamela	Heath	Heath.Pamela9493@campos.com	\N	32
cox458	1048616748	Kenneth	Cox	Cox_Kenneth5734@wallace.com	+48445632588	12
york58	597373841	James	York	York_James6082@price.com	+48156673404	17
greer107	487603931	Andrew	Greer	Greer_Andrew7669@boyd.com	\N	2
lindsey778	355733728	Zachary	Lindsey	Lindsey.688@miller.com	+48231386170	8
hayes727	683821278	Haley	Hayes	Hayes.Haley6830@west-fernandez.info	\N	26
moore284	1040208286	Nicole	Moore	Moore.2600@friedman-johnson.com	\N	33
stevens853	68395396	Benjamin	Stevens	StevensBenjamin9516@robinson-mcbride.com	\N	3
jones384	191037159	Richard	Jones	Jones_5838@odom.info	\N	34
arnold219	618180351	Antonio	Arnold	Arnold4925@patterson-black.info	\N	28
crawford133	1073413472	Eddie	Crawford	Crawford_Eddie3634@keith.com	\N	19
jenkins41	44993213	Sean	Jenkins	Jenkins.9495@austin-calderon.net	\N	2
martinez901	301826032	Jeffrey	Martinez	Martinez.5572@smith.com	+48259061174	30
williams223	672565506	Kaitlin	Williams	Williams_1762@wells.com	\N	12
wagner497	88308533	Sean	Wagner	Wagner_4620@alvarado.com	+48864320937	6
brown15	284061475	Edward	Brown	Brown_Edward5617@phillips-rich.net	+48888962901	2
brown546	1037976453	Andrew	Brown	Brown_2385@austin-kim.com	+48190956238	2
lopez108	977922635	Edward	Lopez	Lopez5247@walsh-conrad.com	\N	26
patel421	195017398	Steven	Patel	Patel.247@livingston.com	\N	30
potter478	908512240	Brittney	Potter	Potter7681@wilson.org	\N	2
roberts882	845129869	Kathryn	Roberts	Roberts.Kathryn474@smith.com	\N	12
davis162	294481787	John	Davis	DavisJohn5716@cook.com	+48991627130	19
kelly527	395793106	Bryan	Kelly	Kelly.6090@robbins.com	\N	30
harper165	264686342	Erika	Harper	Harper4178@hill.net	\N	14
norton863	803086076	James	Norton	Norton.8191@bray.net	\N	1
baldwin976	320383099	Jesse	Baldwin	Baldwin.2692@weiss.biz	\N	25
sandoval356	217559878	Walter	Sandoval	Sandoval.Walter8098@walker.biz	+48558245361	31
gamble6	911414692	Lisa	Gamble	Gamble_3789@novak-nichols.com	\N	21
chen463	164164131	Jon	Chen	Chen.2511@harris-robinson.com	+48183598901	29
carlson594	301297338	Hannah	Carlson	Carlson_Hannah1195@wagner.com	+48729752572	16
ayala335	837499680	Jennifer	Ayala	Ayala_Jennifer2270@nguyen-martin.info	+48759088941	16
love900	424826206	Donna	Love	Love.Donna7692@horton.org	+48939609759	1
ellis74	822885693	Brittany	Ellis	Ellis2586@taylor-mcclure.biz	+48494298828	15
randall771	324434728	Kyle	Randall	Randall.8317@delgado.info	+48379830826	1
day195	102165780	Brandon	Day	Day_3170@sanders-wilson.net	\N	14
henderson492	13342869	Shawn	Henderson	Henderson.3052@brooks.biz	\N	20
kelly165	839612497	Kimberly	Kelly	Kelly.Kimberly4953@ward-sims.com	+48153155824	23
aguilar911	326133132	Melanie	Aguilar	Aguilar_1582@jensen-lopez.com	\N	7
ward234	927640956	Sophia	Ward	Ward.3800@hunt.com	\N	21
stone293	465905728	Michael	Stone	Stone6461@roach.com	\N	20
riley342	341244778	Pamela	Riley	Riley.3479@young.net	\N	8
clark46	487279468	Scott	Clark	Clark.Scott6321@david.biz	\N	26
beasley272	552725005	Cindy	Beasley	Beasley7152@morris.net	+48281580748	26
mata952	219256989	Darren	Mata	Mata_6151@johnson.com	\N	29
riddle210	423502370	Seth	Riddle	Riddle.Seth772@underwood-campbell.com	+48769660300	14
phillips763	466335361	William	Phillips	Phillips_William6120@ray.org	+48283782576	15
\.

COPY SALES (sales_date) FROM stdin; 
2019-10-02 02:12:30
2019-10-02 08:10:07
2019-10-08 03:49:42
2019-10-08 07:45:50
2019-10-08 08:20:58
2019-10-08 09:11:52
2019-10-12 12:53:51
2019-10-13 18:05:56
2019-10-16 08:27:32
2019-10-16 21:01:12
2019-10-19 06:19:08
2019-10-19 15:40:07
2019-10-19 20:33:51
2019-10-20 05:17:10
2019-10-20 12:07:54
2019-10-20 12:11:19
2019-10-20 13:44:04
2019-10-21 01:51:25
2019-10-23 01:17:45
2019-10-23 02:33:46
2019-10-25 15:52:35
2019-10-26 16:00:48
2019-10-27 11:25:03
2019-10-27 23:55:35
2019-10-30 13:02:57
2019-10-30 17:42:31
2019-10-30 22:37:42
2019-10-31 01:39:43
2019-10-31 09:47:46
2019-10-31 15:39:23
2019-10-31 18:35:43
2019-11-01 02:34:08
2019-11-01 12:13:13
2019-11-02 11:18:11
2019-11-03 03:48:24
2019-11-04 09:45:18
2019-11-04 22:09:33
2019-11-07 11:33:24
2019-11-07 20:15:11
2019-11-09 13:53:09
2019-11-11 03:57:10
2019-11-11 15:50:17
2019-11-11 22:23:14
2019-11-12 13:08:24
2019-11-12 15:28:17
2019-11-13 08:09:37
2019-11-13 13:34:36
2019-11-13 18:31:58
2019-11-14 16:23:38
2019-11-16 23:24:41
2019-11-18 22:45:44
2019-11-19 16:15:52
2019-11-19 19:53:11
2019-11-21 08:07:20
2019-11-22 03:20:59
2019-11-24 12:34:00
2019-11-25 04:42:39
2019-11-25 07:41:23
2019-11-25 14:19:38
2019-11-26 08:41:47
2019-11-27 16:48:58
2019-11-28 15:36:00
2019-11-29 05:22:54
2019-11-30 17:39:50
2019-12-01 10:57:13
2019-12-01 22:25:42
2019-12-04 09:48:27
2019-12-05 01:08:45
2019-12-06 19:03:30
2019-12-07 01:28:14
2019-12-08 07:22:27
2019-12-08 11:19:42
2019-12-10 21:20:30
2019-12-13 13:25:53
2019-12-13 18:09:48
2019-12-15 10:05:52
2019-12-17 16:16:14
2019-12-19 05:16:24
2019-12-19 13:05:18
2019-12-20 09:09:34
2019-12-21 05:54:33
2019-12-23 03:21:37
2019-12-24 12:29:11
2019-12-25 05:04:44
2019-12-26 22:22:03
2019-12-27 07:55:16
2019-12-27 08:19:17
2019-12-29 11:44:52
2019-12-29 11:52:48
2019-12-31 01:44:21
2019-12-31 17:09:30
2020-01-01 07:56:57
2020-01-01 10:31:55
2020-01-01 17:54:11
2020-01-03 09:44:35
2020-01-04 09:07:28
2020-01-05 20:51:32
2020-01-08 22:41:47
\.

COPY PRODUCTS_SOLD (id_sale, id_product, quantity) FROM stdin; 
1	78	1
2	1725	4
3	256	4
4	948	3
5	847	2
6	457	4
7	1259	4
8	1320	2
9	1533	3
10	649	2
11	832	4
12	468	1
12	931	1
13	440	1
14	457	1
15	649	3
16	501	4
17	187	4
18	1861	1
19	483	1
20	671	4
21	1831	1
21	271	4
22	1492	2
22	1629	1
23	1243	4
23	78	4
24	898	2
25	1477	1
26	1329	4
27	1850	2
28	898	3
29	2060	2
30	1911	1
31	283	3
32	246	2
33	918	1
34	1727	4
35	1812	3
36	256	3
36	1862	3
37	1725	1
37	552	3
37	1044	4
38	931	1
39	1905	3
40	1425	3
41	1643	2
42	615	3
43	865	2
44	2026	1
45	1950	4
46	671	4
46	119	3
47	1862	1
48	1119	3
49	1730	1
50	322	2
51	798	4
52	131	3
53	1655	4
54	793	1
55	1494	3
55	2056	4
56	1850	3
57	1019	2
58	1036	4
59	2020	3
60	78	2
61	147	2
62	918	2
62	948	1
63	124	1
64	1861	2
65	1643	3
66	2060	4
67	1643	2
68	294	1
69	931	3
70	2069	4
71	1727	4
72	1003	4
73	723	1
74	1278	4
75	294	4
76	641	2
77	931	4
78	480	1
79	1492	4
80	1422	1
81	1255	3
82	855	1
82	1036	2
83	855	2
84	1008	2
85	331	3
86	75	3
87	1278	2
88	215	1
89	1911	1
90	1947	2
91	502	3
92	1850	1
93	119	2
94	1344	1
95	634	4
95	855	3
96	1305	1
97	679	2
98	467	2
\.

COPY CLIENTS_RETURN (id_sale, id_product, quantity, return_date) FROM stdin; 
46	671	2	2021-01-04 00:00:00
40	1425	1	2021-01-03 00:00:00
67	1643	1	2021-01-02 00:00:00
76	641	1	2021-01-02 00:00:00
93	119	1	2021-01-02 00:00:00
\.

COPY COMPLAINT (id_sale, id_product, quantity, complaint_date, complaint_description, result_date, complaint_accepted, id_employee) FROM stdin; 
30	1911	1	2021-01-01 00:00:00	30 is broken	\N	\N	\N
26	1329	2	2021-01-04 00:00:00	26 is broken	\N	\N	\N
62	948	1	2021-01-01 00:00:00	62 is broken	\N	\N	\N
1	78	1	2021-01-01 00:00:00	1 is broken	\N	\N	\N
37	552	1	2021-01-03 00:00:00	37 is broken	\N	\N	\N
48	1119	1	2021-01-03 00:00:00	48 is broken	2021-02-03 00:00:00	True	4
88	215	1	2021-01-01 00:00:00	88 is broken	2021-02-01 00:00:00	True	2
78	480	1	2021-01-01 00:00:00	78 is broken	2021-02-01 00:00:00	True	2
75	294	2	2021-01-04 00:00:00	75 is broken	2021-02-04 00:00:00	False	5
9	1533	1	2021-01-03 00:00:00	9 is broken	2021-02-03 00:00:00	False	4
\.

COPY PRODUCTS_PROBLEMS (id_product, quantity, exhibition, returned, problem_description, discount) FROM stdin; 
\.

COPY INTERNET_SALE (id_sale, date_delivery, method_delivery, id_address) FROM stdin; 
4	2019-10-09 07:45:50	poczta	20
8	2019-10-14 18:05:56	poczta	33
15	2019-10-23 12:07:54	poczta	2
21	2019-10-27 15:52:35	poczta	19
22	2019-10-28 16:00:48	poczta	10
26	2019-11-01 17:42:31	poczta	6
40	2019-11-11 13:53:09	poczta	20
42	2019-11-14 15:50:17	poczta	12
48	2019-11-14 18:31:58	poczta	33
49	2019-11-15 16:23:38	poczta	25
51	2019-11-20 22:45:44	poczta	13
53	2019-11-22 19:53:11	poczta	15
54	2019-11-23 08:07:20	poczta	18
56	2019-11-27 12:34:00	poczta	9
58	2019-11-26 07:41:23	poczta	3
60	2019-11-28 08:41:47	poczta	23
61	2019-11-30 16:48:58	poczta	20
67	2019-12-06 09:48:27	poczta	29
73	2019-12-11 21:20:30	poczta	3
84	2019-12-26 05:04:44	poczta	24
87	2019-12-29 08:19:17	poczta	32
90	2020-01-01 01:44:21	poczta	21
95	2020-01-04 09:44:35	poczta	22
\.

COMMIT;
